/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp_order;

import erp.database.Database;
import erp.model.Inventory;
import erp.model.RawMatIssue;
import java.awt.Dialog;
import java.awt.Window;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;

public class RawMaterialIssue extends javax.swing.JDialog {

    /**
     * Creates new form ProductionUpdate
     */
     ArrayList<Inventory>inventoryData ;
     ArrayList<Object[]>newReqMatData;
     ArrayList<Object[]>completedReqMat;
    public RawMaterialIssue(Window w) {

        super(w);

        setTitle("Raw Material Issue");
        setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        initComponents();
        
        newReqMatData = Database.getReqForIssue(false);
        for(int i=0; i<newReqMatData.size(); i++){
            
            ((DefaultTableModel)tableNewReqMat.getModel()).addRow(newReqMatData.get(i));
        }
        
        try {
           inventoryData = Database.getInventoryData();
            Object[][] o = new Object[inventoryData.size()][];
            for(int i=0; i<inventoryData.size(); i++){
                ((DefaultTableModel)inventoryTable.getModel()).addRow(new Object[]{inventoryData.get(i).getMaterialType(), inventoryData.get(i).getMaterialSubType(), 
                inventoryData.get(i).getQuantity()});
            }
             
            
        } catch (Exception ex) {
            Logger.getLogger(RawMaterialIssue.class.getName()).log(Level.SEVERE, null, ex);
        }
        completedReqMat = Database.getReqForIssue(true);
         for(int i=0; i<completedReqMat.size(); i++){
            
            ((DefaultTableModel)tableCompltedReq.getModel()).addRow(completedReqMat.get(i));
        }
        setLocationRelativeTo(null);

    }

    public void setValueInTable() {
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("ERP_ORDERPU");
//        EntityManager em = entityManagerFactory.createEntityManager();
//        EntityTransaction userTransaction = em.getTransaction();
//        java.util.List<erp.model.ProductionUpdate> p = em.createNamedQuery("ProductionUpdate.findAll").getResultList();
//        for (erp.model.ProductionUpdate sp : p) {
//            model.addRow(new Object[]{
//                sp.getIssueNo(), sp.getIssueDate(), sp.getUpdateBy(), sp.getJobNo(), sp.getIssueDate(),
//                sp.getJobNo(), sp.getJobDate(), sp.getItemRef(), sp.getOrdQty(), ""
//            });
//        }
//
//        em.close();
//        entityManagerFactory.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableNewReqMat = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableCompltedReq = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Raw Material Issue");

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 20));

        jButton1.setText("Complete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inventoryTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material Type", "Material Sub Type", "Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.setName(""); // NOI18N
        inventoryTable.setRowHeight(30);
        inventoryTable.setRowMargin(0);
        inventoryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(inventoryTable);
        inventoryTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (inventoryTable.getColumnModel().getColumnCount() > 0) {
            inventoryTable.getColumnModel().getColumn(2).setResizable(false);
            inventoryTable.getColumnModel().getColumn(2).setPreferredWidth(110);
        }

        tableNewReqMat.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tableNewReqMat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material Type", "Material Sub Type", "Total Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableNewReqMat.setName(""); // NOI18N
        tableNewReqMat.setRowHeight(30);
        tableNewReqMat.setRowMargin(0);
        tableNewReqMat.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableNewReqMat);
        tableNewReqMat.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tableNewReqMat.getColumnModel().getColumnCount() > 0) {
            tableNewReqMat.getColumnModel().getColumn(2).setResizable(false);
            tableNewReqMat.getColumnModel().getColumn(2).setPreferredWidth(110);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("Newly Requisition Material");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Inventory Status");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel4.setText("Completed Requisition");

        tableCompltedReq.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tableCompltedReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material Type", "Material Sub Type", "Total Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCompltedReq.setName(""); // NOI18N
        tableCompltedReq.setRowHeight(30);
        tableCompltedReq.setRowMargin(0);
        tableCompltedReq.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableCompltedReq);
        tableCompltedReq.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tableCompltedReq.getColumnModel().getColumnCount() > 0) {
            tableCompltedReq.getColumnModel().getColumn(2).setResizable(false);
            tableCompltedReq.getColumnModel().getColumn(2).setPreferredWidth(110);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(468, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(187, 187, 187))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel4))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        ArrayList<Integer>inventoryIdx = new ArrayList<>();
        ArrayList<Boolean>isShort = new ArrayList<>();
        ArrayList<Double>qtyUp = new ArrayList<>();
        
        ArrayList<String>imt = new ArrayList<>();
        ArrayList<String>smt = new ArrayList<>();
        ArrayList<Double>newq = new ArrayList<>();
        
        ArrayList<Double>reqQty = new ArrayList<>();

        
        boolean flag = true;
       ArrayList<Integer>changedIndx = new ArrayList<Integer>();
        ArrayList<RawMatIssue>rmt = new ArrayList<>();
        
        for(int i=0; i<newReqMatData.size(); i++){
            
            String newMT = (String)newReqMatData.get(i)[0];
            String  newSMT = (String)newReqMatData.get(i)[1];
            double newQ = (double)newReqMatData.get(i)[2];
            
            for(int j=0; j<inventoryData.size(); j++){
                String iMT = inventoryData.get(j).getMaterialType();
                String iSMT = inventoryData.get(j).getMaterialSubType();
                double iQ = inventoryData.get(j).getQuantity();
                
                if(newMT.equals(iMT)&&iSMT.equals(newSMT)){
                    
                    if(newQ>iQ){
                        inventoryIdx.add(j);
                        reqQty.add(Math.ceil(newQ-iQ));
                        isShort.add(true);
                   //     JOptionPane.showMessageDialog(RawMaterialIssue.this, "Please Purchase Material.");     
                          flag = false;
//                        break;
                    }else{
                        inventoryIdx.add(j);
                        isShort.add(false);

                        qtyUp.add(inventoryData.get(j).getQuantity()-newQ);
                     //   inventoryData.get(j).setQuantity(inventoryData.get(j).getQuantity()-newQ);
                        changedIndx.add(j);
                        imt.add(iMT);
                        smt.add(iSMT);
                        newq.add(newQ);
                      //  rmt.add(new RawMatIssue(iMT, iSMT, newQ, false));
                    }
                }
                
            }
//            if(!flag)
//                break;
        }
        if(!flag)
        {
             ArrayList<Inventory>inv = new ArrayList<>();

             for(int i=0; i<inventoryIdx.size(); i++){
                 if(isShort.get(i)){
                    inv.add(inventoryData.get(i));
                 }
               
              //   System.out.println(inventoryData.get(i).getMaterialType()+" "+inventoryData.get(i).getMaterialSubType());
            }
               new AdjustInventory(inv, reqQty, this).setVisible(true);
        }else{
            for(int i=0; i<inventoryIdx.size(); i++){
                 inventoryData.get(i).setQuantity(qtyUp.get(i));
                 rmt.add(new RawMatIssue(imt.get(i), smt.get(i), newq.get(i), false ));

            }
  
            
            for(RawMatIssue r: rmt){
                try {
                    Database.saveRaw_Mat_Issue(r);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RawMaterialIssue.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(RawMaterialIssue.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            for(int i=0; i<changedIndx.size(); i++){
                try {
                    Database.updateInventory(inventoryData.get(changedIndx.get(i)));
                    Database.updateRawMatReqToBool(inventoryData.get(changedIndx.get(i)).getMaterialType(), inventoryData.get(changedIndx.get(i)).getMaterialSubType());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RawMaterialIssue.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(RawMaterialIssue.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        
        
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable inventoryTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tableCompltedReq;
    private javax.swing.JTable tableNewReqMat;
    // End of variables declaration//GEN-END:variables
}
